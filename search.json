[{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"mouse-interaction-functions","dir":"Articles","previous_headings":"","what":"Mouse interaction functions","title":"Introduction to shinyjqui","text":"five kinds mouse interactions jQuery UI library: Draggable: Allow elements moved using mouse. Droppable: Create targets draggable elements. Resizable: Change size element using mouse. Selectable: Use mouse select elements, individually group. Sortable: Reorder elements list grid using mouse. shinyjqui provides corresponding R functions: jqui_draggable(), jqui_droppable(), jqui_resizable(), jqui_selectable() jqui_sortable(). interaction functions can used shiny apps add mouse interaction effects HTML elements.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"the-ui-mode-and-server-mode","dir":"Articles","previous_headings":"Mouse interaction functions","what":"The ui mode and server mode","title":"Introduction to shinyjqui","text":"interaction functions can used ui definition (ui mode) server function (server mode) ui definition, can wrap shiny ui object (tag, tagList, input output) interaction function like : function returns modified shiny ui corresponding interaction effect attached. can use interaction functions inside server function . case, depends operation parameter, functions add, modify remove interaction effect existing (pre-defined ui) ui element: ui mode straightforward way create ui element mouse interactions, however, server mode flexible. 1) can reactively control element’s interaction effect observe() observEvent(); 2) can use jQuery_selector even JavaScript expression locate multiple target elements; 3) can control interaction effects operation parameter. (see operation parameter section ).","code":"# create a draggable textInput in shiny ui ui <- fluidPage(   jqui_draggable(textInput(\"foo\", \"Input\")) ) # create a textInput in shiny ui without mouse interaction ui <- fluidPage(   textInput(\"foo\", \"Input\") )  # make the ui element with id \"foo\" draggable server <- function(input, output) {   jqui_draggable(ui = \"#foo\", operation = \"enable\") }"},{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"the-ui-parameter","dir":"Articles","previous_headings":"Mouse interaction functions","what":"The ui parameter","title":"Introduction to shinyjqui","text":"first parameter interaction functions ui. determines target element(s) manipulate. Based working mode, accepts different object types. ui mode, mentioned , can pass shiny ui object class shiny.tag shiny.tag.list. example: server mode, can pass string jQuery_selector. example: even flexible, can use htmlwidgets::JS() function wrap custom javascript expression returns jQuery object. example: shinyjqui v0.4.0, interaction functions can work static htmlwidgets. example, can pass plotly htmlwidget object:","code":"# shiny input jqui_draggable(ui = textInput(\"foo\", \"Caption\", \"Data Summary\"))  # shiny output jqui_resizable(ui = plotOutput(\"myplot\"))  # HTML list jqui_sortable(   ui = tags$ul(     tags$li(\"Coffice\"),      tags$li(\"Tea\"),      tags$li(\"Milk\")   ) ) # target multiple HTML elements by passing a set of ids jqui_draggable(ui = \"#id1,#id2,#id3\")  # target all the shiny `plotOuput`s by passing the class `shiny-plot-output` jqui_resizable(ui = \".shiny-plot-output\")  # target all <p> elements where the parent is a <div> element jqui_draggable(ui = \"div > p\") # target all the child elements whose parent has the id `foo` jqui_draggable(ui = JS(\"$('#foo').children()\")) # render a resizable plotly htmlwidget in RStudio Viewer or RMarkdown jqui_resizable(ui = plot_ly(z = ~volcano, type = \"surface\"))"},{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"the-operation-parameter","dir":"Articles","previous_headings":"Mouse interaction functions","what":"The operation parameter","title":"Introduction to shinyjqui","text":"parameter server mode . determines manipulate interaction. following five options supported: enable: Initiate corresponding mouse interaction target(s) (default option). disable: Initiate interaction temporarily disable (setting JS options). destroy: Completely remove interaction. save: Initiate interaction save current interaction state. load: Initiate interaction restore target(s) user defined interaction state last saved state. save load options included v0.3.0. can used save restore state (e.g. size, position, order) element. can find details Vignette Save restore.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"the-options-parameter","dir":"Articles","previous_headings":"Mouse interaction functions","what":"The options parameter","title":"Introduction to shinyjqui","text":"options parameter can used specify behavior interaction. complete list available options interaction can found jQuery UI’s API Documentation page. examples:","code":""},{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"draggable","dir":"Articles","previous_headings":"Mouse interaction functions > The options parameter","what":"Draggable","title":"Introduction to shinyjqui","text":"Draggable elements can moved mouse. can custom movement options:","code":"# drag only horizontally jqui_draggable('#foo', options = list(axis = 'x')) # make movement snapping to a 80 x 80 grid jqui_draggable('#foo', options = list(grid = c(80, 80)))"},{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"droppable","dir":"Articles","previous_headings":"Mouse interaction functions > The options parameter","what":"Droppable","title":"Introduction to shinyjqui","text":"droppable interaction enabled, element can sense behavior accepted draggable elements make changes (e.g. change display style) accordingly: passing JavaScript callback function options parameter, please wrap JS() can evaluated correctly.","code":"jqui_droppable('#foo', options = list(   accept = '#bar', # jQuery selector to define which draggable element to monitor. Accept anything if not set.   classes = list(     `ui-droppable-active` = 'ui-state-focus', # change class when draggable element is dragging     `ui-droppable-hover` = 'ui-state-highlight' # change class when draggable element is dragging over   ),   drop = JS(     'function(event, ui){$(this).addClass(\"ui-state-active\");}'   ) # a javascrip callback to change class when draggable element is dropped in ))"},{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"resizable","dir":"Articles","previous_headings":"Mouse interaction functions > The options parameter","what":"Resizable","title":"Introduction to shinyjqui","text":"can change size resizable element dragging resize-handles around . Several examples listed :","code":"# keep aspect ratio when resizing jqui_resizable('#foo', options = list(aspectRatio = TRUE))  # Limit the resizable element to a maximum or minimum height or width jqui_resizable('#foo', options = list(minHeight = 100, maxHeight = 300,                                       minWidth = 200, maxWidth = 400))  # make the two plotOutputs resize synchronously jqui_resizable(plotOutput('plot1', width = '400px', height = '400px'),                    options = list(alsoResize = '#plot2')), plotOutput('plot2', width = '400px', height = '400px')"},{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"selectable","dir":"Articles","previous_headings":"Mouse interaction functions > The options parameter","what":"Selectable","title":"Introduction to shinyjqui","text":"selectable interaction makes target element’s children selectable. can select click, Ctrl+click dragging box (lasso selection). selected elements may change display styles specified options:","code":"# highlight the selected plotOutput jqui_selectable(   div(     plotOutput('plot1', width = '400px', height = '400px'),     plotOutput('plot2', width = '400px', height = '400px')   ),   options = list(classes = list(`ui-selected` = 'ui-state-highlight')) )"},{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"sortable","dir":"Articles","previous_headings":"Mouse interaction functions > The options parameter","what":"Sortable","title":"Introduction to shinyjqui","text":"sortable interaction makes target element’s children sortable. can rearrange drag drop. examples :","code":"# change opacity while sorting jqui_sortable('#foo', options = list(opacity = 0.5))  # only items with class \"items\" inside the element become sortable jqui_sortable('#foo', options = list(items = '> .items'))  # connect two sortable elements, so that items in one element can be dragged to another jqui_sortable('#foo1', options = list(connectWith = '#foo2')) jqui_sortable('#foo2', options = list(connectWith = '#foo1'))"},{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"the-input-values-and-shiny-options","dir":"Articles","previous_headings":"Mouse interaction functions","what":"The input values and shiny options","title":"Introduction to shinyjqui","text":"shiny, user input values sent back server form input$<id>. Similarly, interaction functions can send back interaction-specific state values form input$<id>_<suffix>, id element id (id attribute shiny tag, inputId shiny inputs, outputId shiny outputs) suffix depends type interaction enabled. table shows currently deployed interaction state values: can even customize returned values including shiny option options parameter. shiny option created following format: shiny option defined list event-callback pairs named suffix.valid event types interactions can found API Documentation jQuery UI.callback wrapped JS(). JS callback functions take two parameters, event ui. definition ui parameter can also found API document . example: using shiny option callbacks, may want get id certain element JavaScript. simple shiny tags (e.g. tags$div), element.attr(\"id\") just works fine, however, things become complicated shiny inputs (e.g. textInput). id attribute shiny inputs hidden inside div container. may use jQuery function .find() locate . shinyjqui package comes internal JavaScript function shinyjqui.getId() take care . can just simply pass shiny element, either simple tag, shiny input shiny output. use appropriate way find id.","code":"shiny_opt = list(      # define shiny input value input$id_suffix1   suffix1 = list(     # on event_type1 run callback1 and send the returned value to input$id_suffix1     event_type1 = JS(callback1),     # on event_type2 or event_type3 run callback2 and send the returned value to input$id_suffix1     `event_type2 event_type3` = JS(callback2),     ...   ),      # define another shiny input value input$id_suffix2   suffix2 = list(     ...   ),      # define more shiny input values    )  # pass the shiny option to an interaction function jqui_draggable('#foo', options = list(   shiny = shiny_opt,    #other draggable-specific options )) # server jqui_draggable('#foo', options = list(   shiny = list(     # By default, draggable element has a shiny input value showing the     # element's position (relative to the parent element). Here, another shiny     # input value (input$foo_offset) is added. It returns the element's offset     # (position relative to the document).     offset = list(       # return the updated offset value when the draggable is created or dragging       `dragcreate drag` = JS('function(event, ui) {return $(event.target).offset();}'),     )   ) ))"},{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"animation-effects","dir":"Articles","previous_headings":"","what":"Animation effects","title":"Introduction to shinyjqui","text":"jQuery UI library comes 15 internal animation effects. can get full list R function get_jqui_effects(): live demo effect . use following functions, can apply effects shiny ui element well: functions work server mode. effect parameter accepts string defines animation effect apply. Note: transfer effect can used jqui_effect(). options parameter accepts list effect specific options. Please find details . complete parameter accepts JavaScript callback function called animation. Please wrap JS(). examples:","code":"#>  [1] \"blind\"     \"bounce\"    \"clip\"      \"drop\"      \"explode\"   \"fade\"      #>  [7] \"fold\"      \"highlight\" \"puff\"      \"pulsate\"   \"scale\"     \"shake\"     #> [13] \"size\"      \"slide\"     \"transfer\" # ui plotOutput('foo', width = '400px', height = '400px')  # server jqui_effect('#foo', effect = 'bounce') # bounces the plot jqui_effect('#foo', effect = 'scale', options = list(percent = 50)) # scale to 50% jqui_hide('#foo', effect = 'size', options = list(width = 200, height = 60)) # resize then hide jqui_show('#foo', effect = 'clip') # show the plot by clipping"},{"path":"https://yang-tang.github.io/shinyjqui/articles/introduction.html","id":"classes-animation","dir":"Articles","previous_headings":"","what":"Classes animation","title":"Introduction to shinyjqui","text":"functions can used change shiny element’s class(es) animating style changes: Similar animation effects functions, functions server-. easing parameter defines speed style animation progresses. details can found ","code":""},{"path":"https://yang-tang.github.io/shinyjqui/articles/save-and-restore.html","id":"what-can-be-save-and-restored","dir":"Articles","previous_headings":"","what":"What can be save and restored?","title":"Save and restore","text":"based type interactions. See following table:","code":""},{"path":"https://yang-tang.github.io/shinyjqui/articles/save-and-restore.html","id":"how-to-save-and-restore-inside-a-shiny-session-client-side","dir":"Articles","previous_headings":"","what":"How to save and restore inside a shiny session (client-side)?","title":"Save and restore","text":"case users want temporarily save current interaction state (e.g., position element) restore later shiny session (without closing app reloading page). interaction functions offer save load operations serve purpose: operations also work orderInput(), selectableTableOutput() sortableTabsetPanel(). example, load operation can also work independently load user-defined-state state option exists.","code":"ui <- fluidPage(   actionButton(\"save\", \"Save position\"),   actionButton(\"restore\", \"Restore position\"),   # create a draggable textInput   jqui_draggable(textInput(\"foo\", \"Textinput\")) )  server <- function(input, output) {   # on save button clicked, save the current position of the textInput   observeEvent(input$save, {     jqui_draggable(\"#foo\", operation = \"save\")   })   # on restore button clicked, move the textInput back to the last saved position   observeEvent(input$restore, {     jqui_draggable(\"#foo\", operation = \"load\")   }) }  shinyApp(ui, server) ui <- fluidPage(   actionButton(\"save\", \"Save order\"),   actionButton(\"restore\", \"Restore order\"),   orderInput(\"foo1\", label = NULL, items = 1:3, connect = \"foo2\"),   orderInput(\"foo2\", label = NULL, items = NULL, placeholder = \"empty\") )  server <- function(input, output) {   observeEvent(input$save, {     jqui_sortable(\"#foo1,#foo2\", operation = \"save\")   })   observeEvent(input$restore, {     jqui_sortable(\"#foo1,#foo2\", operation = \"load\")   }) }  shinyApp(ui, server) ui <- fluidPage(   actionButton(\"s\", \"Small\"),   actionButton(\"m\", \"Medium\"),   actionButton(\"l\", \"Large\"),   jqui_resizable(plotOutput('gg', width = '200px', height = '200px')) )  server <- function(input, output) {   output$gg <- renderPlot({     ggplot(mtcars, aes(x = cyl, y = mpg)) + geom_point()   })   observeEvent(input$s,                 jqui_resizable(                  ui        = \"#gg\",                   operation = \"load\",                   options   = list(state = list(width  = 100, height = 100))                )   )   observeEvent(input$m,                 jqui_resizable(                  ui        = \"#gg\",                   operation = \"load\",                   options   = list(state = list(width  = 200, height = 200))                )   )   observeEvent(input$l,                 jqui_resizable(                  ui        = \"#gg\",                   operation = \"load\",                   options   = list(state = list(width  = 400, height = 400))                )   ) }  shinyApp(ui, server)"},{"path":"https://yang-tang.github.io/shinyjqui/articles/save-and-restore.html","id":"how-to-save-and-restore-between-shiny-sessions-shiny-bookmarking","dir":"Articles","previous_headings":"","what":"How to save and restore between shiny sessions (shiny bookmarking)?","title":"Save and restore","text":"addition client-side mode, cross-session save/restore also supported, takes advantage shiny bookmarking. case, users can save interaction state alone shiny input values either URL-encoding save--server, restore another shiny session. thing needed include jqui_bookmarking() call server function. operations native shiny bookmarking:","code":"ui <- function(request) {   fluidPage(     bookmarkButton(),     jqui_resizable(plotOutput('gg', width = '200px', height = '200px'))   ) }  server <- function(input, output) {   output$gg <- renderPlot({     ggplot(mtcars, aes(x = cyl, y = mpg)) + geom_point()   })   # enable interaction state bookmarking   jqui_bookmarking() }  enableBookmarking(store = \"url\")  shinyApp(ui, server)"},{"path":"https://yang-tang.github.io/shinyjqui/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yang Tang. Author, maintainer.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tang Y (2022). shinyjqui: 'jQuery UI' Interactions Effects Shiny. https://github.com/yang-tang/shinyjqui, https://yang-tang.github.io/shinyjqui/.","code":"@Manual{,   title = {shinyjqui: 'jQuery UI' Interactions and Effects for Shiny},   author = {Yang Tang},   year = {2022},   note = {https://github.com/yang-tang/shinyjqui, https://yang-tang.github.io/shinyjqui/}, }"},{"path":"https://yang-tang.github.io/shinyjqui/index.html","id":"shinyjqui","dir":"","previous_headings":"","what":"jQuery UI Interactions and Effects for Shiny","title":"jQuery UI Interactions and Effects for Shiny","text":"shinyjqui package R wrapper jQuery UI javascript library. can used easily add interactions animation effects shiny app.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"jQuery UI Interactions and Effects for Shiny","text":"can install stable version CRAN, development version github :","code":"# install from CRAN install.packages('shinyjqui')  # for the development version devtools::install_github(\"yang-tang/shinyjqui\")"},{"path":"https://yang-tang.github.io/shinyjqui/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"jQuery UI Interactions and Effects for Shiny","text":"Draggable: Allow elements moved using mouse  Resizable: Change size element using mouse.  Sortable: Reorder elements list grid using mouse.  Animation Effects: Apply animation effect element. Effects can also used hide show.  Classes transformation: Add remove class(es) elements animating style changes.  orderInput(): Display list items. order can changed drag drop.  sortableTableOutput(): Render HTML table sortable rows.  selectableTableOutput(): Render HTML table selectable rows cells.  information, please visit package website.","code":"# load packages library(shiny) library(shinyjqui) library(ggplot2) library(highcharter) server <- function(input, output) {}  ui <- fluidPage(   jqui_draggable(fileInput('file', 'File')) )  shinyApp(ui, server) server <- function(input, output) {   output$gg <- renderPlot({     ggplot(mtcars, aes(x = cyl, y = mpg)) + geom_point()   }) }  ui <- fluidPage(   jqui_resizable(plotOutput('gg', width = '200px', height = '200px')) )  shinyApp(ui, server) server <- function(input, output) {   output$hc <- renderHighchart({     hchart(mtcars, \"scatter\", hcaes(x = cyl, y = mpg, group = factor(vs))) %>%        hc_legend(enabled = FALSE)   })   output$gg <- renderPlot({     ggplot(mtcars, aes(x = cyl, y = mpg, color = factor(vs))) +        geom_point() +        theme(legend.position= \"none\")   }) }  ui <- fluidPage(   jqui_sortable(div(id = 'plots',                      highchartOutput('hc', width = '200px', height = '200px'),                      plotOutput('gg', width = '200px', height = '200px'))) )  shinyApp(ui, server) server <- function(input, output) {   observeEvent(input$show, {     jqui_show('#gg', effect = input$effect)   })      observeEvent(input$hide, {     jqui_hide('#gg', effect = input$effect)   })      output$gg <- renderPlot({     ggplot(mtcars, aes(x = cyl, y = mpg, color = factor(gear))) +       geom_point() +       theme(plot.background = element_rect(fill = \"transparent\",colour = NA))   }, bg = \"transparent\") }  ui <- fluidPage(   div(style = 'width: 400px; height: 400px',       plotOutput('gg', width = '100%', height = '100%')),   selectInput('effect', NULL, choices = get_jqui_effects()),   actionButton('show', 'Show'),   actionButton('hide', 'Hide') )  shinyApp(ui, server) server <- function(input, output) {    current_class <- c()    observe({     input$class     class_to_remove <- setdiff(current_class, input$class)     class_to_add <- setdiff(input$class, current_class)     current_class <<- input$class     if(length(class_to_remove) > 0) {       jqui_remove_class('#foo', paste(class_to_remove, collapse = ' '), duration = 1000)}     if(length(class_to_add) > 0) {       jqui_add_class('#foo', paste(class_to_add, collapse = ' '), duration = 1000)}   })  }  ui <- fluidPage(    tags$head(     tags$style(       HTML('.class1 { width: 410px; height: 100px; }             .class2 { text-indent: 40px; letter-spacing: .2em; }             .class3 { padding: 30px; margin: 10px; }             .class4 { font-size: 1.1em; }')     )   ),    div(id = 'foo', 'Etiam libero neque, luctus a, eleifend nec, semper at, lorem. Sed pede.'),   hr(),   checkboxGroupInput('class', 'Class',                      choices = list(`width: 410px; height: 100px;` = 'class1',                                     `text-indent: 40px; letter-spacing: .2em;` = 'class2',                                     `padding: 30px; margin: 10px;` = 'class3',                                     `font-size: 1.1em;` = 'class4'))   )  shinyApp(ui, server) server <- function(input, output) {   output$order <- renderPrint({ print(input$dest) }) }  ui <- fluidPage(   orderInput('source', 'Source', items = month.abb,              as_source = TRUE, connect = 'dest'),   orderInput('dest', 'Dest', items = NULL, placeholder = 'Drag items here...'),   verbatimTextOutput('order') )  shinyApp(ui, server) ui <- fluidPage(   verbatimTextOutput(\"index\"),   sortableTableOutput(\"tbl\") )  server <- function(input, output) {   output$index <- renderPrint({     cat(\"Row index:\\n\")     input$tbl_row_index   })   output$tbl <- renderTable(head(mtcars), rownames = TRUE) }  shinyApp(ui, server) ui <- fluidPage(   selectableTableOutput(\"tbl\", selection_mode = \"cell\"),   verbatimTextOutput(\"selected\") )  server <- function(input, output) {   output$selected <- renderPrint({     cat(\"Selected:\\n\")     input$tbl_selected   })   output$tbl <- renderTable(head(mtcars), rownames = TRUE) }  shinyApp(ui, server)"},{"path":"https://yang-tang.github.io/shinyjqui/reference/Animation_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Animation effects. — Animation_effects","title":"Animation effects. — Animation_effects","text":"Allow element(s) show animation effects. jqui_effect(): Apply animation effect matched element(s). jqui_hide(): Hide matched element(s) animation effect. jqui_show(): Display matched element(s) animation effect. jqui_toggle(): Display hide matched element(s) animation effect.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/Animation_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animation effects. — Animation_effects","text":"","code":"jqui_effect(ui, effect, options = NULL, duration = 400, complete = NULL)  jqui_show(ui, effect, options = NULL, duration = 400, complete = NULL)  jqui_hide(ui, effect, options = NULL, duration = 400, complete = NULL)  jqui_toggle(ui, effect, options = NULL, duration = 400, complete = NULL)"},{"path":"https://yang-tang.github.io/shinyjqui/reference/Animation_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animation effects. — Animation_effects","text":"ui target ui element(s) manipulated. Can string jQuery_selector JS() wrapped javascript expression returns jQuery object. effect string indicating animation effect use transition. options list effect-specific properties easing. duration string number determining long animation run. complete function call animation complete, called per matched element.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/Animation_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Animation effects. — Animation_effects","text":"functions R wrappers effect(), hide(), show() toggle() jQuery UI library. used server shiny document.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/Animation_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animation effects. — Animation_effects","text":"","code":"if (FALSE) {   # in shiny ui create a plot   plotOutput('foo')    # in shiny server apply a 'bounce' effect to the plot   jqui_effect('#foo', 'bounce')    # in shiny server hide the plot with a 'fold' effect   jqui_hide('#foo', 'fold')    # in shiny server show the plot with a 'blind' effect   jqui_show('#foo', 'blind') }"},{"path":"https://yang-tang.github.io/shinyjqui/reference/Class_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Class effects. — Class_effects","title":"Class effects. — Class_effects","text":"Manipulate specified class(es) matched elements animating style changes. jqui_add_class(): Add class(es). jqui_remove_class(): Remove class(es). jqui_switch_class(): Switch class(es).","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/Class_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class effects. — Class_effects","text":"","code":"jqui_add_class(   ui,   className,   duration = 400,   easing = \"swing\",   complete = NULL )  jqui_remove_class(   ui,   className,   duration = 400,   easing = \"swing\",   complete = NULL )  jqui_switch_class(   ui,   removeClassName,   addClassName,   duration = 400,   easing = \"swing\",   complete = NULL )"},{"path":"https://yang-tang.github.io/shinyjqui/reference/Class_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class effects. — Class_effects","text":"ui target ui element(s) manipulated. Can string jQuery_selector JS() wrapped javascript expression returns jQuery object. className One class names (space separated) added removed class attribute matched element. duration string number determining long animation run. easing string indicating easing function use transition. complete js function call animation complete, called per matched element. removeClassName One class names (space separated) removed class attribute matched element. addClassName One class names (space separated) added class attribute matched element.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/Class_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class effects. — Class_effects","text":"functions R wrappers addClass(), removeClass() switchClass() jQuery UI library. used server shiny app.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/Class_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class effects. — Class_effects","text":"","code":"if (FALSE) {   # in shiny ui create a span   tags$span(id = 'foo', 'class animation demo')    # in shiny server add class 'lead' to the span   jqui_add_class('#foo', className = 'lead') }"},{"path":"https://yang-tang.github.io/shinyjqui/reference/Interactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Mouse interactions — Interactions","title":"Mouse interactions — Interactions","text":"Attach mouse-based interactions shiny html tags, shiny input/output widgets static htmlwidgets provide ways manipulate . interactions include: draggable: Allow elements moved using mouse. droppable: Create targets draggable elements. resizable: Change size element using mouse. selectable: Use mouse select elements, individually group. sortable: Reorder elements list grid using mouse.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/Interactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mouse interactions — Interactions","text":"","code":"jqui_draggable(   ui,   operation = c(\"enable\", \"disable\", \"destroy\", \"save\", \"load\"),   options = NULL )  jqui_droppable(   ui,   operation = c(\"enable\", \"disable\", \"destroy\", \"save\", \"load\"),   options = NULL )  jqui_resizable(   ui,   operation = c(\"enable\", \"disable\", \"destroy\", \"save\", \"load\"),   options = NULL )  jqui_selectable(   ui,   operation = c(\"enable\", \"disable\", \"destroy\", \"save\", \"load\"),   options = NULL )  jqui_sortable(   ui,   operation = c(\"enable\", \"disable\", \"destroy\", \"save\", \"load\"),   options = NULL )"},{"path":"https://yang-tang.github.io/shinyjqui/reference/Interactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mouse interactions — Interactions","text":"ui target ui element(s) manipulated. Can shiny.tag shiny.tag.list object static htmlwidget object string jQuery_selector JS() wrapped javascript expression returns jQuery object. operation string determine manipulate mouse interaction. Can one enable, disable, destroy, save load. Ignored ui shiny.tag shiny.tag.list object. See Details. options list interaction_specific_options. Ignored operation set destroy. parameter also accept shiny option controls shiny input value returned element. See Details.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/Interactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mouse interactions — Interactions","text":"object passed ui parameter","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/Interactions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mouse interactions — Interactions","text":"first parameter ui determines target ui working mode. target ui shiny.tag (e.g., shiny inputs/outputs ui created tags) shiny.tag.list (tagList()) object static htmlwidget, functions return modified ui object interaction effects attached. jQuery_selector javascript expression provided ui parameter, functions first use locate target ui element(s) shiny app, attach manipulate interactions. Therefore, can use first way  ui shiny app create elements interaction effects (ui mode), use second way  server manipulate interactions (server mode). operation parameter valid server mode. determines manipulate interaction, includes: enable: Attach corresponding mouse interaction target(s). disable: Attach interaction disable (set options). destroy: Destroy interaction. save: Attach interaction save current interaction state. load: Attach interaction restore target(s) last saved interaction state. mouse interactions attached, corresponding interaction states, e.g. position draggable, size resizable, selected selectable order sortable, sent server side form input$<id>_<state>. default values can overridden setting shiny option options parameter. Please see vignette Introduction shinyjqui details.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/Interactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mouse interactions — Interactions","text":"","code":"library(shiny) library(highcharter)  ## used in ui jqui_resizable(actionButton('btn', 'Button')) #> <button id=\"btn\" type=\"button\" class=\"btn btn-default action-button\">Button<\/button> #> <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;[id=&#39;btn&#39;]&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;resizable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:[],&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> jqui_draggable(plotOutput('plot', width = '400px', height = '400px'),                 options = list(axis = 'x')) #> <div id=\"plot\" class=\"shiny-plot-output\" style=\"width:400px;height:400px;\"><\/div> #> <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){$(document).one(&#10;            events   = &quot;shiny:value&quot;,&#10;            selector = &quot;[id=&#39;plot&#39;]&quot;,&#10;            handler  = function(e) { setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;[id=&#39;plot&#39;]&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;axis&quot;:&quot;x&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;axis&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10); }&#10;        );});\"><\/iframe> jqui_selectable(   div(     id = 'sel_plots',     highchartOutput('highchart', width = '300px'),     plotOutput('ggplot', width = '300px')   ),   options = list(     classes = list(`ui-selected` = 'ui-state-highlight')   ) ) #> <div id=\"sel_plots\"> #>   <div id=\"highchart\" style=\"width:300px; height:400px; \" class=\"highchart html-widget html-widget-output\"><\/div> #>   <div id=\"ggplot\" class=\"shiny-plot-output\" style=\"width:300px;height:400px;\"><\/div> #> <\/div> #> <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;[id=&#39;sel_plots&#39;]&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;selectable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;classes&quot;:{&quot;ui-selected&quot;:&quot;ui-state-highlight&quot;}},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;classes&quot;:{&quot;ui-selected&quot;:false}},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> jqui_sortable(tags$ul(   id = 'lst',   tags$li('A'),   tags$li('B'),   tags$li('C') )) #> <ul id=\"lst\"> #>   <li>A<\/li> #>   <li>B<\/li> #>   <li>C<\/li> #> <\/ul> #> <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;[id=&#39;lst&#39;]&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;sortable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:[],&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe>  ## used in server if (FALSE) {   jqui_draggable('#foo', options = list(grid = c(80, 80)))   jqui_droppable('.foo', operation = \"enable\") }  ## use shiny input if (interactive()) {   shinyApp(     server = function(input, output) {       output$foo <- renderHighchart({         hchart(mtcars, \"scatter\", hcaes(x = cyl, y = mpg))       })       output$position <- renderPrint({         print(input$foo_position)       })     },     ui = fluidPage(       verbatimTextOutput('position'),       jqui_draggable(highchartOutput('foo', width = '200px', height = '200px'))     )   ) }  ## custom shiny input func <- JS('function(event, ui){return $(event.target).offset();}') options <-  list(   shiny = list(     abs_position = list(       dragcreate = func, # send returned value back to shiny when interaction is created.       drag = func # send returned value to shiny when dragging.     )   ) ) jqui_draggable(highchartOutput('foo', width = '200px', height = '200px'),                 options = options) #> <div id=\"foo\" style=\"width:200px; height:200px; \" class=\"highchart html-widget html-widget-output\"><\/div> #> <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){$(document).one(&#10;            events   = &quot;shiny:value&quot;,&#10;            selector = &quot;[id=&#39;foo&#39;]&quot;,&#10;            handler  = function(e) { setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;[id=&#39;foo&#39;]&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;shiny&quot;:{&quot;abs_position&quot;:{&quot;dragcreate&quot;:&quot;function(event, ui){return $(event.target).offset();}&quot;,&quot;drag&quot;:&quot;function(event, ui){return $(event.target).offset();}&quot;}}},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;shiny&quot;:{&quot;abs_position&quot;:{&quot;dragcreate&quot;:true,&quot;drag&quot;:true}}},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10); }&#10;        );});\"><\/iframe>"},{"path":"https://yang-tang.github.io/shinyjqui/reference/draggableModalDialog.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a draggable modal dialog UI — draggableModalDialog","title":"Create a draggable modal dialog UI — draggableModalDialog","text":"creates UI modal dialog similar shiny::modalDialog except content draggable.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/draggableModalDialog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a draggable modal dialog UI — draggableModalDialog","text":"","code":"draggableModalDialog(   ...,   title = NULL,   footer = shiny::modalButton(\"Dismiss\"),   size = c(\"m\", \"s\", \"l\"),   easyClose = FALSE,   fade = TRUE )"},{"path":"https://yang-tang.github.io/shinyjqui/reference/draggableModalDialog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a draggable modal dialog UI — draggableModalDialog","text":"... UI elements body modal dialog box. title optional title dialog. footer UI footer. Use NULL footer. size One \"s\" small, \"m\" (default) medium, \"l\" large. easyClose TRUE, modal dialog can dismissed clicking outside dialog box, pressing Escape key. FALSE (default), modal dialog dismissed ways; instead must dismissed clicking modalButton(), call removeModal() server. fade FALSE, modal dialog fade-animation (simply appear rather fade view).","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/draggableModalDialog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a draggable modal dialog UI — draggableModalDialog","text":"modified shiny modal dialog UI content draggable.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/get_jqui_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available animation effects. — get_jqui_effects","title":"Get available animation effects. — get_jqui_effects","text":"Use function get animation effects jQuery UI.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/get_jqui_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available animation effects. — get_jqui_effects","text":"","code":"get_jqui_effects()"},{"path":"https://yang-tang.github.io/shinyjqui/reference/get_jqui_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available animation effects. — get_jqui_effects","text":"character vector effect names","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/jqui_bookmarking.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable bookmarking state of mouse interactions — jqui_bookmarking","title":"Enable bookmarking state of mouse interactions — jqui_bookmarking","text":"Enable shiny bookmarking_state mouse interactions. calling function server, elements' position, size, selection state sorting state changed mouse operations can saved restored URL.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/jqui_bookmarking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable bookmarking state of mouse interactions — jqui_bookmarking","text":"","code":"jqui_bookmarking()"},{"path":"https://yang-tang.github.io/shinyjqui/reference/jqui_icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a jQuery UI icon — jqui_icon","title":"Create a jQuery UI icon — jqui_icon","text":"Create jQuery UI pre-defined icon. lists available icons, see https://api.jqueryui.com/theming/icons/.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/jqui_icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a jQuery UI icon — jqui_icon","text":"","code":"jqui_icon(name)"},{"path":"https://yang-tang.github.io/shinyjqui/reference/jqui_icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a jQuery UI icon — jqui_icon","text":"name Class name icon. \"ui-icon-\" prefix can omitted (.e. use \"ui-icon-flag\" \"flag\" display flag icon)","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/jqui_icon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a jQuery UI icon — jqui_icon","text":"icon element","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/jqui_icon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a jQuery UI icon — jqui_icon","text":"","code":"jqui_icon('caret-1-n') #> <i class=\"ui-icon ui-icon-caret-1-n\"><\/i>  library(shiny)  # add an icon to an actionButton actionButton('button', 'Button', icon = jqui_icon('refresh')) #> <button id=\"button\" type=\"button\" class=\"btn btn-default action-button\"> #>   <i class=\"ui-icon ui-icon-refresh\"><\/i> #>   Button #> <\/button>  # add an icon to a tabPanel tabPanel('Help', icon = jqui_icon('help')) #> <div class=\"tab-pane\" title=\"Help\" data-value=\"Help\" data-icon-class=\"ui-icon ui-icon-help\"><\/div>"},{"path":"https://yang-tang.github.io/shinyjqui/reference/jqui_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Position an element relative to another — jqui_position","title":"Position an element relative to another — jqui_position","text":"Wrapper jQuery UI .position() method, allows position element relative window, document, another element, cursor/mouse, without worrying offset parents.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/jqui_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Position an element relative to another — jqui_position","text":"","code":"jqui_position(   ui,   my = \"center\",   at = \"center\",   of,   collision = \"flip\",   within = JS(\"$(window)\") )"},{"path":"https://yang-tang.github.io/shinyjqui/reference/jqui_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Position an element relative to another — jqui_position","text":"ui element positioned. Can string jQuery_selector JS() wrapped javascript expression returns jQuery object. first matching element used. String. Defines position element positioned align target element: \"horizontal vertical\" alignment. single value \"right\" normalized \"right center\", \"top\" normalized \"center top\" (following CSS convention). Acceptable horizontal values: \"left\", \"center\", \"right\". Acceptable vertical values: \"top\", \"center\", \"bottom\". Example: \"left top\" \"center center\". dimension can also contain offsets, pixels percent, e.g., \"right+10 top-25%\". Percentage offsets relative element positioned. String. Defines position target element align positioned element : \"horizontal vertical\" alignment. See option full details possible values. Percentage offsets relative target element. element position . Can string jQuery_selector JS() wrapped javascript expression returns jQuery object. first matching element used. collision String. positioned element overflows window direction, move alternative position. Similar , accepts single value pair horizontal/vertical, e.g., \"flip\", \"fit\", \"fit flip\", \"fit none\". \"flip\": Flips element opposite side target collision detection run see fit. Whichever side allows element visible used. \"fit\": Shift element away edge window. \"flipfit\": First applies flip logic, placing element whichever side allows element visible. fit logic applied ensure much element visible possible. \"none\": apply collision detection. within Element position within, affecting collision detection. Can string jQuery_selector JS() wrapped javascript expression returns jQuery object. first matching element used.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/orderInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a shiny input control to show the order of a set of items — orderInput","title":"Create a shiny input control to show the order of a set of items — orderInput","text":"Display set items whose order can changed drag drop inside orderInput(s). item order send back server input$inputId.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/orderInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a shiny input control to show the order of a set of items — orderInput","text":"","code":"orderInput(   inputId,   label,   items,   as_source = FALSE,   connect = NULL,   item_class = c(\"default\", \"primary\", \"success\", \"info\", \"warning\", \"danger\"),   placeholder = NULL,   width = \"500px\",   legacy = FALSE,   ... )"},{"path":"https://yang-tang.github.io/shinyjqui/reference/orderInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a shiny input control to show the order of a set of items — orderInput","text":"inputId input slot used access current order items. label Display label control, NULL label. items Items display, can list, atomic vector factor. list atomic vector, named, names displayed order given values. factor, values displayed order given levels as_source boolean value determine whether orderInput set source mode. works connect argument set. connect Optional. Allow items dragged orderInputs. vector inputId(s) orderInput(s) items orderInput connected . item_class One Bootstrap color utility classes apply item. placeholder character string show item left orderInput. width width input, e.g. '400px', '100\\ shiny::validateCssUnit. legacy boolean value. Whether use old version orderInput function. ... Arguments passed shiny::tags$div used build container orderInput.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/orderInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a shiny input control to show the order of a set of items — orderInput","text":"orderInput control can added UI definition.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/orderInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a shiny input control to show the order of a set of items — orderInput","text":"orderInputs can work either connected mode stand-alone mode. stand-alone mode, items can drag drop inside input control. connected mode, items dragged orderInputs, controlled connect parameter. one-way relationship. connect items directions, connect parameter must set orderInputs. connected mode, orderInput can set source-as_source parameter. items \"source\" orderInput can copied, instead moved, connected non-source orderInput(s). shinyjqui v0.4.0, \"source\" orderInput become \"recycle bin\" items orderInputs well. means, want delete item, can drag drop \"source\" orderInput. feature can disabled setting options non-source orderInput(s) list(helper = \"clone\"). shinyjqui v0.4.0 , orderInput function implemented similar way classical shiny inputs, brought two changes: input value changed input$inputId_order input$inputId; new version supports updateOrderInput function works way shiny input updater functions. keep backward compatibility, legacy argument provided user wanted use old version.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/orderInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a shiny input control to show the order of a set of items — orderInput","text":"","code":"orderInput('items1', 'Items1', items = month.abb, item_class = 'info') #> <label class=\"control-label\" id=\"items1-label\" for=\"items1\">Items1<\/label> #> <div id=\"items1\" style=\"width: 500px; font-size: 0px; min-height: 25px;\" class=\"jqui-orderInput\"> #>   <div data-value=\"Jan\" class=\"btn btn-info\" style=\"margin: 1px\">Jan<\/div> #>   <div data-value=\"Feb\" class=\"btn btn-info\" style=\"margin: 1px\">Feb<\/div> #>   <div data-value=\"Mar\" class=\"btn btn-info\" style=\"margin: 1px\">Mar<\/div> #>   <div data-value=\"Apr\" class=\"btn btn-info\" style=\"margin: 1px\">Apr<\/div> #>   <div data-value=\"May\" class=\"btn btn-info\" style=\"margin: 1px\">May<\/div> #>   <div data-value=\"Jun\" class=\"btn btn-info\" style=\"margin: 1px\">Jun<\/div> #>   <div data-value=\"Jul\" class=\"btn btn-info\" style=\"margin: 1px\">Jul<\/div> #>   <div data-value=\"Aug\" class=\"btn btn-info\" style=\"margin: 1px\">Aug<\/div> #>   <div data-value=\"Sep\" class=\"btn btn-info\" style=\"margin: 1px\">Sep<\/div> #>   <div data-value=\"Oct\" class=\"btn btn-info\" style=\"margin: 1px\">Oct<\/div> #>   <div data-value=\"Nov\" class=\"btn btn-info\" style=\"margin: 1px\">Nov<\/div> #>   <div data-value=\"Dec\" class=\"btn btn-info\" style=\"margin: 1px\">Dec<\/div> #> <\/div> #> <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;[id=&#39;items1&#39;]&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;sortable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectWith&quot;:&quot;false&quot;,&quot;remove&quot;:&quot;function(e, ui){if(!$(e.target).children().length)$(e.target).empty();}&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectWith&quot;:false,&quot;remove&quot;:true},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe>  ## build connections between orderInputs orderInput('items2', 'Items2 (can be moved to Items1 and Items4)', items = month.abb,            connect = c('items1', 'items4'), item_class = 'primary') #> <label class=\"control-label\" id=\"items2-label\" for=\"items2\">Items2 (can be moved to Items1 and Items4)<\/label> #> <div id=\"items2\" style=\"width: 500px; font-size: 0px; min-height: 25px;\" class=\"jqui-orderInput\"> #>   <div data-value=\"Jan\" class=\"btn btn-primary\" style=\"margin: 1px\">Jan<\/div> #>   <div data-value=\"Feb\" class=\"btn btn-primary\" style=\"margin: 1px\">Feb<\/div> #>   <div data-value=\"Mar\" class=\"btn btn-primary\" style=\"margin: 1px\">Mar<\/div> #>   <div data-value=\"Apr\" class=\"btn btn-primary\" style=\"margin: 1px\">Apr<\/div> #>   <div data-value=\"May\" class=\"btn btn-primary\" style=\"margin: 1px\">May<\/div> #>   <div data-value=\"Jun\" class=\"btn btn-primary\" style=\"margin: 1px\">Jun<\/div> #>   <div data-value=\"Jul\" class=\"btn btn-primary\" style=\"margin: 1px\">Jul<\/div> #>   <div data-value=\"Aug\" class=\"btn btn-primary\" style=\"margin: 1px\">Aug<\/div> #>   <div data-value=\"Sep\" class=\"btn btn-primary\" style=\"margin: 1px\">Sep<\/div> #>   <div data-value=\"Oct\" class=\"btn btn-primary\" style=\"margin: 1px\">Oct<\/div> #>   <div data-value=\"Nov\" class=\"btn btn-primary\" style=\"margin: 1px\">Nov<\/div> #>   <div data-value=\"Dec\" class=\"btn btn-primary\" style=\"margin: 1px\">Dec<\/div> #> <\/div> #> <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;[id=&#39;items2&#39;]&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;sortable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectWith&quot;:&quot;#items1, #items4&quot;,&quot;remove&quot;:&quot;function(e, ui){if(!$(e.target).children().length)$(e.target).empty();}&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectWith&quot;:false,&quot;remove&quot;:true},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe>  ## build connections in source mode orderInput('items3', 'Items3 (can be copied to Items2 and Items4)', items = month.abb,            as_source = TRUE, connect = c('items2', 'items4'), item_class = 'success') #> <label class=\"control-label\" id=\"items3-label\" for=\"items3\">Items3 (can be copied to Items2 and Items4)<\/label> #> <div id=\"items3\" style=\"width: 500px; font-size: 0px; min-height: 25px;\" class=\"jqui-orderInput-source\"> #>   <div class=\"btn btn-success jqui-interaction-BlnPNkNJ\" data-value=\"Jan\" style=\"margin: 1px\">Jan<\/div> #>   <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;.jqui-interaction-BlnPNkNJ&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectToSortable&quot;:&quot;#items2, #items4&quot;,&quot;helper&quot;:&quot;clone&quot;,&quot;cancel&quot;:&quot;&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectToSortable&quot;:false,&quot;helper&quot;:false,&quot;cancel&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> #>   <div class=\"btn btn-success jqui-interaction-6dGw71nb\" data-value=\"Feb\" style=\"margin: 1px\">Feb<\/div> #>   <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;.jqui-interaction-6dGw71nb&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectToSortable&quot;:&quot;#items2, #items4&quot;,&quot;helper&quot;:&quot;clone&quot;,&quot;cancel&quot;:&quot;&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectToSortable&quot;:false,&quot;helper&quot;:false,&quot;cancel&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> #>   <div class=\"btn btn-success jqui-interaction-HDiSYJzz\" data-value=\"Mar\" style=\"margin: 1px\">Mar<\/div> #>   <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;.jqui-interaction-HDiSYJzz&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectToSortable&quot;:&quot;#items2, #items4&quot;,&quot;helper&quot;:&quot;clone&quot;,&quot;cancel&quot;:&quot;&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectToSortable&quot;:false,&quot;helper&quot;:false,&quot;cancel&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> #>   <div class=\"btn btn-success jqui-interaction-qS0W90Su\" data-value=\"Apr\" style=\"margin: 1px\">Apr<\/div> #>   <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;.jqui-interaction-qS0W90Su&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectToSortable&quot;:&quot;#items2, #items4&quot;,&quot;helper&quot;:&quot;clone&quot;,&quot;cancel&quot;:&quot;&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectToSortable&quot;:false,&quot;helper&quot;:false,&quot;cancel&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> #>   <div class=\"btn btn-success jqui-interaction-LuqZxsST\" data-value=\"May\" style=\"margin: 1px\">May<\/div> #>   <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;.jqui-interaction-LuqZxsST&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectToSortable&quot;:&quot;#items2, #items4&quot;,&quot;helper&quot;:&quot;clone&quot;,&quot;cancel&quot;:&quot;&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectToSortable&quot;:false,&quot;helper&quot;:false,&quot;cancel&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> #>   <div class=\"btn btn-success jqui-interaction-Byn3CODH\" data-value=\"Jun\" style=\"margin: 1px\">Jun<\/div> #>   <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;.jqui-interaction-Byn3CODH&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectToSortable&quot;:&quot;#items2, #items4&quot;,&quot;helper&quot;:&quot;clone&quot;,&quot;cancel&quot;:&quot;&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectToSortable&quot;:false,&quot;helper&quot;:false,&quot;cancel&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> #>   <div class=\"btn btn-success jqui-interaction-oPZNAsnP\" data-value=\"Jul\" style=\"margin: 1px\">Jul<\/div> #>   <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;.jqui-interaction-oPZNAsnP&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectToSortable&quot;:&quot;#items2, #items4&quot;,&quot;helper&quot;:&quot;clone&quot;,&quot;cancel&quot;:&quot;&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectToSortable&quot;:false,&quot;helper&quot;:false,&quot;cancel&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> #>   <div class=\"btn btn-success jqui-interaction-we4DudCI\" data-value=\"Aug\" style=\"margin: 1px\">Aug<\/div> #>   <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;.jqui-interaction-we4DudCI&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectToSortable&quot;:&quot;#items2, #items4&quot;,&quot;helper&quot;:&quot;clone&quot;,&quot;cancel&quot;:&quot;&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectToSortable&quot;:false,&quot;helper&quot;:false,&quot;cancel&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> #>   <div class=\"btn btn-success jqui-interaction-yUTc7pkj\" data-value=\"Sep\" style=\"margin: 1px\">Sep<\/div> #>   <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;.jqui-interaction-yUTc7pkj&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectToSortable&quot;:&quot;#items2, #items4&quot;,&quot;helper&quot;:&quot;clone&quot;,&quot;cancel&quot;:&quot;&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectToSortable&quot;:false,&quot;helper&quot;:false,&quot;cancel&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> #>   <div class=\"btn btn-success jqui-interaction-1sK3znVJ\" data-value=\"Oct\" style=\"margin: 1px\">Oct<\/div> #>   <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;.jqui-interaction-1sK3znVJ&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectToSortable&quot;:&quot;#items2, #items4&quot;,&quot;helper&quot;:&quot;clone&quot;,&quot;cancel&quot;:&quot;&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectToSortable&quot;:false,&quot;helper&quot;:false,&quot;cancel&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> #>   <div class=\"btn btn-success jqui-interaction-PXJSsM9T\" data-value=\"Nov\" style=\"margin: 1px\">Nov<\/div> #>   <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;.jqui-interaction-PXJSsM9T&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectToSortable&quot;:&quot;#items2, #items4&quot;,&quot;helper&quot;:&quot;clone&quot;,&quot;cancel&quot;:&quot;&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectToSortable&quot;:false,&quot;helper&quot;:false,&quot;cancel&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> #>   <div class=\"btn btn-success jqui-interaction-F0t3opTs\" data-value=\"Dec\" style=\"margin: 1px\">Dec<\/div> #>   <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;.jqui-interaction-F0t3opTs&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;draggable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectToSortable&quot;:&quot;#items2, #items4&quot;,&quot;helper&quot;:&quot;clone&quot;,&quot;cancel&quot;:&quot;&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectToSortable&quot;:false,&quot;helper&quot;:false,&quot;cancel&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe> #> <\/div> #> <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;[id=&#39;items3&#39;]&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;droppable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;drop&quot;:&quot;function(e, ui) { $(ui.helper).remove(); }&quot;,&quot;classes&quot;:{&quot;ui-droppable-hover&quot;:&quot;ui-state-error&quot;},&quot;accept&quot;:&quot;:not(.jqui-orderInput-source *)&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;drop&quot;:true,&quot;classes&quot;:{&quot;ui-droppable-hover&quot;:false},&quot;accept&quot;:false},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe>  ## show placeholder orderInput('items4', 'Items4 (can be moved to Items2)', items = NULL, connect = 'items2',            placeholder = 'Drag items here...') #> <label class=\"control-label\" id=\"items4-label\" for=\"items4\">Items4 (can be moved to Items2)<\/label> #> <div id=\"items4\" style=\"width: 500px; font-size: 0px; min-height: 25px;\" class=\"jqui-orderInput\"><\/div> #> <iframe srcdoc=\"&lt;p&gt;cant catch me&lt;/p&gt;\" class=\"jqui_self_cleaning_script\" style=\"width:0;height:0;border:none;display:none !important\" onload=\"$(function(){setTimeout(function(){shinyjqui.msgCallback({&quot;ui&quot;:&quot;[id=&#39;items4&#39;]&quot;,&quot;type&quot;:&quot;interaction&quot;,&quot;func&quot;:&quot;sortable&quot;,&quot;operation&quot;:&quot;enable&quot;,&quot;options&quot;:{&quot;connectWith&quot;:&quot;#items2&quot;,&quot;remove&quot;:&quot;function(e, ui){if(!$(e.target).children().length)$(e.target).empty();}&quot;},&quot;debug&quot;:false,&quot;_js_idx&quot;:{&quot;ui&quot;:false,&quot;type&quot;:false,&quot;func&quot;:false,&quot;operation&quot;:false,&quot;options&quot;:{&quot;connectWith&quot;:false,&quot;remove&quot;:true},&quot;debug&quot;:false}});&#10;      $(&quot;.jqui_self_cleaning_script&quot;).remove();}, 10);});\"><\/iframe>"},{"path":"https://yang-tang.github.io/shinyjqui/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. htmlwidgets JS","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/selectableTableOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table output element with selectable rows or cells — selectableTableOutput","title":"Create a table output element with selectable rows or cells — selectableTableOutput","text":"Render standard HTML table rows cells selectable. server receive index selected rows cells stored input$<outputId>_selected.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/selectableTableOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table output element with selectable rows or cells — selectableTableOutput","text":"","code":"selectableTableOutput(outputId, selection_mode = c(\"row\", \"cell\"))"},{"path":"https://yang-tang.github.io/shinyjqui/reference/selectableTableOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table output element with selectable rows or cells — selectableTableOutput","text":"outputId output variable read table selection_mode one \"row\" \"cell\" define either entire row individual cell can selected.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/selectableTableOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table output element with selectable rows or cells — selectableTableOutput","text":"table output element can included panel","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/selectableTableOutput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a table output element with selectable rows or cells — selectableTableOutput","text":"Use mouse click select single target, lasso (mouse dragging) select multiple targets, Ctrl + click add remove selection. row selection mode, input$<outputId>_selected receive selected row index form numeric vector. cell selection mode, input$<outputId>_selected receive dataframe rows columns index selected cells.","code":""},{"path":[]},{"path":"https://yang-tang.github.io/shinyjqui/reference/selectableTableOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a table output element with selectable rows or cells — selectableTableOutput","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   shinyApp(     ui = fluidPage(       verbatimTextOutput(\"selected\"),       selectableTableOutput(\"tbl\")     ),     server = function(input, output) {       output$selected <- renderPrint({input$tbl_selected})       output$tbl <- renderTable(mtcars, rownames = TRUE)     }   ) }"},{"path":"https://yang-tang.github.io/shinyjqui/reference/shinyjqui-package.html","id":null,"dir":"Reference","previous_headings":"","what":"shinyjqui: 'jQuery UI' Interactions and Effects for Shiny — shinyjqui-package","title":"shinyjqui: 'jQuery UI' Interactions and Effects for Shiny — shinyjqui-package","text":"extension shiny brings interactions animation effects 'jQuery UI' library.","code":""},{"path":[]},{"path":"https://yang-tang.github.io/shinyjqui/reference/shinyjqui-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"shinyjqui: 'jQuery UI' Interactions and Effects for Shiny — shinyjqui-package","text":"Maintainer: Yang Tang tang_yang@outlook.com","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableCheckboxGroupInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Checkbox Group Input Control with Sortable Choices — sortableCheckboxGroupInput","title":"Create a Checkbox Group Input Control with Sortable Choices — sortableCheckboxGroupInput","text":"Render group checkboxes multiple choices toggleable. choices also sortable drag drop. addition selected values stored input$<inputId>, server also receive order choices input$<inputId>_order.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableCheckboxGroupInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Checkbox Group Input Control with Sortable Choices — sortableCheckboxGroupInput","text":"","code":"sortableCheckboxGroupInput(   inputId,   label,   choices = NULL,   selected = NULL,   inline = FALSE,   width = NULL,   choiceNames = NULL,   choiceValues = NULL )"},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableCheckboxGroupInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Checkbox Group Input Control with Sortable Choices — sortableCheckboxGroupInput","text":"inputId input slot used access value. label Display label control, NULL label. choices List values show checkboxes . elements list named name rather value displayed user. argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected values initially selected, . inline TRUE, render choices inline (.e. horizontally) width width input, e.g. '400px', '100%'; see validateCssUnit(). choiceNames List names values, respectively, displayed user app correspond choice (reason, choiceNames choiceValues must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. See Examples. choiceValues List names values, respectively, displayed user app correspond choice (reason, choiceNames choiceValues must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. See Examples.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableCheckboxGroupInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Checkbox Group Input Control with Sortable Choices — sortableCheckboxGroupInput","text":"list HTML elements can added UI definition","code":""},{"path":[]},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableCheckboxGroupInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Checkbox Group Input Control with Sortable Choices — sortableCheckboxGroupInput","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   shinyApp(     ui = fluidPage(       sortableCheckboxGroupInput(\"foo\", \"SortableCheckboxGroupInput\",                                  choices = month.abb),       verbatimTextOutput(\"order\")     ),     server = function(input, output) {       output$order <- renderPrint({input$foo_order})     }   ) }"},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableRadioButtons.html","id":null,"dir":"Reference","previous_headings":"","what":"Create radio buttons with sortable choices — sortableRadioButtons","title":"Create radio buttons with sortable choices — sortableRadioButtons","text":"Create set radio buttons used select item list. choices sortable drag drop. addition selected values stored input$<inputId>, server also receive order choices input$<inputId>_order.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableRadioButtons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create radio buttons with sortable choices — sortableRadioButtons","text":"","code":"sortableRadioButtons(   inputId,   label,   choices = NULL,   selected = NULL,   inline = FALSE,   width = NULL,   choiceNames = NULL,   choiceValues = NULL )"},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableRadioButtons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create radio buttons with sortable choices — sortableRadioButtons","text":"inputId input slot used access value. label Display label control, NULL label. choices List values select (elements list named name rather value displayed user). argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected initially selected value. specified, defaults first item choices. start items selected, use character(0). inline TRUE, render choices inline (.e. horizontally) width width input, e.g. '400px', '100%'; see validateCssUnit(). choiceNames List names values, respectively, displayed user app correspond choice (reason, choiceNames choiceValues must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. See Examples. choiceValues List names values, respectively, displayed user app correspond choice (reason, choiceNames choiceValues must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. See Examples.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableRadioButtons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create radio buttons with sortable choices — sortableRadioButtons","text":"set radio buttons can added UI definition.","code":""},{"path":[]},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableRadioButtons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create radio buttons with sortable choices — sortableRadioButtons","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   shinyApp(     ui = fluidPage(       sortableRadioButtons(\"foo\", \"SortableRadioButtons\",                                  choices = month.abb),       verbatimTextOutput(\"order\")     ),     server = function(input, output) {       output$order <- renderPrint({input$foo_order})     }   ) }"},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableTableOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table output element with sortable rows — sortableTableOutput","title":"Create a table output element with sortable rows — sortableTableOutput","text":"Render standard HTML table table rows sortable drag drop. order table rows recorded input$<outputId>_order.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableTableOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table output element with sortable rows — sortableTableOutput","text":"","code":"sortableTableOutput(outputId)"},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableTableOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table output element with sortable rows — sortableTableOutput","text":"outputId output variable read table ","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableTableOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table output element with sortable rows — sortableTableOutput","text":"table output element can included panel","code":""},{"path":[]},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableTableOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a table output element with sortable rows — sortableTableOutput","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   shinyApp(     ui = fluidPage(       verbatimTextOutput(\"rows\"),       sortableTableOutput(\"tbl\")     ),     server = function(input, output) {       output$rows <- renderPrint({input$tbl_row_index})       output$tbl <- renderTable(mtcars, rownames = TRUE)     }   ) }"},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableTabsetPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tabset panel with sortable tabs — sortableTabsetPanel","title":"Create a tabset panel with sortable tabs — sortableTabsetPanel","text":"Create tabset contains shiny::tabPanel elements. tabs sortable drag drop. addition activated tab title stored input$<id>, server also receive order tabs input$<id>_order.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableTabsetPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tabset panel with sortable tabs — sortableTabsetPanel","text":"","code":"sortableTabsetPanel(   ...,   id = NULL,   selected = NULL,   type = c(\"tabs\", \"pills\"),   position = NULL )"},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableTabsetPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tabset panel with sortable tabs — sortableTabsetPanel","text":"... tabPanel() elements include tabset id provided, can use input$id server logic determine current tabs active. value correspond value argument passed tabPanel(). selected value (, none supplied, title) tab selected default. NULL, first tab selected. type \"tabs\" Standard tab look \"pills\" Selected tabs use background fill color \"hidden\" Hides selectable tabs. Use type = \"hidden\" conjunction tabPanelBody() updateTabsetPanel() control active tab via input controls. (See example )","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableTabsetPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tabset panel with sortable tabs — sortableTabsetPanel","text":"tabset can passed shiny::mainPanel","code":""},{"path":[]},{"path":"https://yang-tang.github.io/shinyjqui/reference/sortableTabsetPanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tabset panel with sortable tabs — sortableTabsetPanel","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   shinyApp(     ui = fluidPage(       sortableTabsetPanel(         id = \"tabs\",         tabPanel(title = \"A\", \"AAA\"),         tabPanel(title = \"B\", \"BBB\"),         tabPanel(title = \"C\", \"CCC\")       ),       verbatimTextOutput(\"order\")     ),     server = function(input, output) {       output$order <- renderPrint({input$tabs_order})     }   ) }"},{"path":"https://yang-tang.github.io/shinyjqui/reference/updateOrderInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of an orderInput on the client — updateOrderInput","title":"Change the value of an orderInput on the client — updateOrderInput","text":"Similar input updater functions shiny package, function send message client, telling change settings orderInput object. arguments NULL values ignored; result changes input object client. function update \"source\" orderInputs.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/updateOrderInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of an orderInput on the client — updateOrderInput","text":"","code":"updateOrderInput(   session,   inputId,   label = NULL,   items = NULL,   connect = NULL,   item_class = NULL )"},{"path":"https://yang-tang.github.io/shinyjqui/reference/updateOrderInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of an orderInput on the client — updateOrderInput","text":"session session object passed function given shinyServer. inputId input slot used access current order items. label Display label control, NULL label. items Items display, can list, atomic vector factor. list atomic vector, named, names displayed order given values. factor, values displayed order given levels connect Optional. Allow items dragged orderInputs. vector inputId(s) orderInput(s) items orderInput connected . item_class One Bootstrap color utility classes apply item.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/reference/updateOrderInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of an orderInput on the client — updateOrderInput","text":"","code":"library(shiny)  if (interactive()) {    ui <- fluidPage(     orderInput(\"foo\", \"foo\",                items = month.abb[1:3],                item_class = 'info'),     verbatimTextOutput(\"order\"),     actionButton(\"update\", \"update\")   )    server <- function(input, output, session) {     output$order <- renderPrint({input$foo})     observeEvent(input$update, {       updateOrderInput(session, \"foo\",                        items = month.abb[1:6],                        item_class = \"success\")     })   }    shinyApp(ui, server)  }"},{"path":"https://yang-tang.github.io/shinyjqui/news/index.html","id":"shinyjqui-041","dir":"Changelog","previous_headings":"","what":"shinyjqui 0.4.1","title":"shinyjqui 0.4.1","text":"Bug fix: jqui_resizable() return current size time. (#77) Bug fix: orderInput() work named vector/list duo update jsonlite. (#81) Bug fix: interaction related shiny input values assigned correct id nested shiny outputs. (#77) Bug fix: interaction related shiny input values react non-shinyjqui-binding elements. (#83)","code":""},{"path":"https://yang-tang.github.io/shinyjqui/news/index.html","id":"shinyjqui-040","dir":"Changelog","previous_headings":"","what":"shinyjqui 0.4.0","title":"shinyjqui 0.4.0","text":"CRAN release: 2021-02-23 New feature: (Experimentally) Now interaction functions can work static htmlwidgets RStudio Viewer RMarkdown (e.g. jqui_resizable(plotly::plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length))). (#44) New feature: Now orderInput() can updated updateOrderInput(). (#41, #57) New feature: Items orderInput() can now deleted drag drop “source” orderInput(). (Idea raytong #65) New feature: New jqui_position() function position shiny ui relative another. New feature: Uses TouchPunch enable mobile use. (Thanks @rquitales, #45) Breaking change: orderInput function now implemented similar way shiny inputs, input value changed input$inputId_order input$inputId. Breaking change: Removed jqui_draggabled(), jqui_droppabled(), jqui_resizabled(), jqui_selectabled(), jqui_sortabled() includeJqueryUI() deprecated long time. Breaking change: Removed deprecated selector, tag switch parameters interaction effect functions. Bug fix: Effect-specific options longer ignored jqui_effect(). (#56) Bug fix: input$id_order sortable now return values connectToSortable option used. Bug fix: Nested interaction functions working shiny tag without id (e.g. jqui_resizable(jqui_draggable(div(\"aaa\")))). (#66) Bug fix: Nested interaction functions showed “Action abort” warning shiny tag without id. (#66) Bug fix: using load operation sortable element orderInput, items “source” orderInputs removed. (#70) Bug fix: Enable NULL label orderInput(). (#63) Bug fix: regression bug introduced v0.3.3 interactive tag effective inserted insertUI. (#58)","code":""},{"path":"https://yang-tang.github.io/shinyjqui/news/index.html","id":"shinyjqui-033","dir":"Changelog","previous_headings":"","what":"shinyjqui 0.3.3","title":"shinyjqui 0.3.3","text":"CRAN release: 2020-02-03 Bug fix: Fixed incompatibility Shiny v1.4.0: due Shiny upgrading jQuery 1.x 3.x, timing shinjqui initialization routines changed. Bug fix: sortableRadioButtons/sortableCheckboxGroupInput work inline. (@sam-harvey, #37). Bug fix: interaction functions, shiny options suffix overwrite default settings, thus affect return value interaction widgets. (#43) Bug fix: Interaction functions working ui mode flexdashboard. (#53) Add global option shinyjqui.debug, can TURE FALSE(default), control whether load original/minified shinyjqui.js (#39) display/hide javascript debug message (e.g. options(shinyjqui.debug = TRUE)) (#3).","code":""},{"path":"https://yang-tang.github.io/shinyjqui/news/index.html","id":"shinyjqui-032","dir":"Changelog","previous_headings":"","what":"shinyjqui 0.3.2","title":"shinyjqui 0.3.2","text":"CRAN release: 2018-07-25 Bug fix: interaction functions working ui mode ui id spaces. Bug fix: interaction functions working ui mode output elements exist. (#25) Bug fix: Effect class functions working duo upgrade v0.3.0. (#26, #28)","code":""},{"path":"https://yang-tang.github.io/shinyjqui/news/index.html","id":"shinyjqui-031","dir":"Changelog","previous_headings":"","what":"shinyjqui 0.3.1","title":"shinyjqui 0.3.1","text":"CRAN release: 2018-07-08 Bug fix: interaction functions working selector mode duo v0.3.0 update. Bug fix: shiny output elements created insertUI renderUI, mouse interaction effects now working.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/news/index.html","id":"shinyjqui-030","dir":"Changelog","previous_headings":"","what":"shinyjqui 0.3.0","title":"shinyjqui 0.3.0","text":"CRAN release: 2018-07-01 New feature: Introduce save load operations mouse-interaction attached html elements. enabled client-side store restore elements’ states (eg. position, size, selection order). (#16) New feature: -able functions can used shiny server ui, therefore, -abled functions deprecated. New feature: Adds shiny bookmark supporting mouse-interaction attached html elements. enabled server-side across-client store restore elements’ states (eg. position, size, selection order). (#12) New feature: Now, interaction functions’ selector argument accepts JS() wrapped javascript expression. made target element selection flexible. New feature: Add draggableModalDialog(), sortableCheckboxGroupInput(), sortableRadioButtons(), sortableTabsetPanel(), sortableTableOutput() selectableTableOutput() functions create shiny inputs outputs mouse interactions. Breaking change: switch argument mouse-interaction functions replaced operation argument support options. Breaking change: shiny input values selected selectable order sortable now return elements’ innerText instead innerHTML. Bug fix: mouse interaction function doesn’t work element inserted . (#6, #8) Bug fix: Resizable interferes interactions target element shiny output. (#10) Bug fix: Add htmlDependency jqui_icon() make work version 0.2.0 .","code":""},{"path":"https://yang-tang.github.io/shinyjqui/news/index.html","id":"shinyjqui-020","dir":"Changelog","previous_headings":"","what":"shinyjqui 0.2.0","title":"shinyjqui 0.2.0","text":"CRAN release: 2017-07-04 longer needed call includeJqueryUI() using shinyjqui functions.(#4) New jqui_icon() create jQuery UI icon. New jqui_toggle() toggle display/hide state shiny html element animation. New pre-defined interaction-specific shiny input values: is_dragging draggable; , drop, dropped droppable; is_resizing resizable; is_selecting selectable.(#1) See vignettes details. Minify shinyjqui.js.(#3) Import export JS() htmlwidgets package. Add pkgdown docs. Documentation Roxygen2 6.0.1.","code":""},{"path":"https://yang-tang.github.io/shinyjqui/news/index.html","id":"shinyjqui-010","dir":"Changelog","previous_headings":"","what":"shinyjqui 0.1.0","title":"shinyjqui 0.1.0","text":"CRAN release: 2017-03-04 Added NEWS.md file track changes package.","code":""}]
